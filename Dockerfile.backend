# Video Art Masterpiece - Backend Dockerfile (Bulletproof Edition)
FROM python:3.11-slim

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies with robust error handling
RUN apt-get clean && \
    apt-get update --fix-missing && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        curl \
        wget \
        ca-certificates \
        gnupg \
        lsb-release && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ffmpeg \
        libglib2.0-0 \
        libsm6 \
        libxext6 \
        libxrender-dev \
        libgomp1 \
        libgcc-s1 \
        libstdc++6 \
        libc6 \
        build-essential \
        pkg-config && \
    # Try to install OpenGL libraries (fallback if not available)
    (apt-get install -y --no-install-recommends libgl1-mesa-glx || \
     apt-get install -y --no-install-recommends libgl1-mesa-dev || \
     echo "OpenGL libraries not available, continuing...") && \
    # Try to install GStreamer libraries (fallback if not available)  
    (apt-get install -y --no-install-recommends \
        libgstreamer1.0-0 \
        libgstreamer-plugins-base1.0-0 || \
     echo "GStreamer libraries not available, continuing...") && \
    # Clean up to reduce image size
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY backend/requirements.txt /app/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ /app/backend/
COPY simple_video_processor.py /app/
COPY advanced_features.py /app/

# Copy environment file (with fallback)
COPY backend/.env* /app/backend/
RUN if [ -f /app/backend/.env.docker ]; then \
        cp /app/backend/.env.docker /app/backend/.env; \
    elif [ ! -f /app/backend/.env ]; then \
        echo "MONGO_URL=mongodb://admin:masterpiece123@mongodb:27017/video_art_masterpiece?authSource=admin" > /app/backend/.env && \
        echo "DB_NAME=video_art_masterpiece" >> /app/backend/.env && \
        echo "CORS_ORIGINS=http://localhost:3000,http://frontend:3000" >> /app/backend/.env; \
    fi

# Create necessary directories
RUN mkdir -p /app/backend/uploads /app/backend/outputs /app/backend/temp /app/backend/gallery /app/backend/previews

# Set Python path
ENV PYTHONPATH=/app

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/api/health || exit 1

# Run the application
CMD ["python", "-m", "uvicorn", "backend.server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]