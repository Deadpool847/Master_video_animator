# Video Art Masterpiece - Frontend Dockerfile (Bulletproof Edition)
FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    curl \
    bash \
    git \
    && rm -rf /var/cache/apk/*

# Set environment variables
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/package.json /app/
COPY frontend/yarn.lock* /app/

# Install dependencies with multiple fallback strategies
RUN npm config set registry https://registry.npmjs.org/ && \
    npm cache clean --force && \
    (npm install --legacy-peer-deps --no-audit --no-fund || \
     npm install --force --no-audit --no-fund || \
     yarn install --ignore-engines --network-timeout 600000 || \
     npm install --legacy-peer-deps --registry https://registry.npmjs.org/) && \
    npm cache clean --force

# Copy frontend code
COPY frontend/ /app/

# Copy Docker-specific environment file
COPY frontend/.env.docker /app/.env

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built files to nginx
COPY --from=0 /app/build /usr/share/nginx/html

# Copy custom nginx config
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]