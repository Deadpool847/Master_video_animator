# üé® Video Art Masterpiece - Windows Setup Instructions
# Complete end-to-end setup guide for Windows systems with VS Code

===============================================================================
üìã SYSTEM REQUIREMENTS
===============================================================================

‚úÖ Windows 10/11 (64-bit)
‚úÖ At least 8GB RAM (16GB recommended)
‚úÖ 10GB free disk space
‚úÖ Internet connection for initial setup
‚úÖ Administrator privileges for installation

===============================================================================
üîß STEP 1: INSTALL REQUIRED SOFTWARE
===============================================================================

1.1) Install Python 3.11+ 
---------------------------
- Download from: https://www.python.org/downloads/windows/
- ‚ö†Ô∏è IMPORTANT: Check "Add Python to PATH" during installation
- Verify installation:
  > python --version
  > pip --version

1.2) Install Node.js 18+ 
-------------------------
- Download from: https://nodejs.org/en/download/
- Choose "Windows Installer (.msi)" for your system
- Install with default settings
- Verify installation:
  > node --version
  > npm --version

1.3) Install MongoDB Community Edition
--------------------------------------
- Download from: https://www.mongodb.com/try/download/community
- Choose "Windows x64"
- Install as Windows Service (recommended)
- Verify installation:
  > mongod --version

1.4) Install FFmpeg
-------------------
Method 1 (Recommended - Using Chocolatey):
- Install Chocolatey first: https://chocolatey.org/install
- Open PowerShell as Administrator
- Run: choco install ffmpeg
- Verify: ffmpeg -version

Method 2 (Manual Installation):
- Download from: https://www.gyan.dev/ffmpeg/builds/
- Extract to C:\ffmpeg\
- Add C:\ffmpeg\bin to System PATH
- Restart Command Prompt
- Verify: ffmpeg -version

1.5) Install Visual Studio Code
-------------------------------
- Download from: https://code.visualstudio.com/
- Install with default settings
- Install recommended extensions:
  * Python (Microsoft)
  * JavaScript and TypeScript Nightly
  * ES7+ React/Redux/React-Native snippets
  * Tailwind CSS IntelliSense
  * Thunder Client (for API testing)

1.6) Install Git for Windows
----------------------------
- Download from: https://git-scm.com/download/win
- Install with default settings (Git Bash included)

===============================================================================
üìÅ STEP 2: PROJECT SETUP
===============================================================================

2.1) Create Project Directory
-----------------------------
Open Command Prompt or PowerShell:
> mkdir C:\VideoArtMasterpiece
> cd C:\VideoArtMasterpiece

2.2) Download Project Files
---------------------------
Copy all project files to C:\VideoArtMasterpiece\
Your structure should look like:
C:\VideoArtMasterpiece\
‚îú‚îÄ‚îÄ backend\
‚îÇ   ‚îú‚îÄ‚îÄ server.py
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt
‚îÇ   ‚îî‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ frontend\
‚îÇ   ‚îú‚îÄ‚îÄ src\
‚îÇ   ‚îú‚îÄ‚îÄ public\
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ simple_video_processor.py
‚îú‚îÄ‚îÄ advanced_features.py
‚îî‚îÄ‚îÄ other files...

===============================================================================
üêç STEP 3: BACKEND SETUP
===============================================================================

3.1) Create Python Virtual Environment
--------------------------------------
> cd C:\VideoArtMasterpiece
> python -m venv venv
> venv\Scripts\activate

You should see (venv) in your command prompt.

3.2) Install Python Dependencies
--------------------------------
> cd backend
> pip install --upgrade pip
> pip install fastapi uvicorn python-multipart aiofiles motor python-dotenv
> pip install opencv-python numpy pillow 
> pip install requests pathlib

‚ö†Ô∏è If OpenCV installation fails, try:
> pip install opencv-python-headless

3.3) Setup Environment Variables
--------------------------------
Edit backend\.env file:
```
MONGO_URL=mongodb://localhost:27017
DB_NAME=video_art_masterpiece
CORS_ORIGINS=http://localhost:3000
```

3.4) Test Backend Installation
------------------------------
> python -c "import cv2, numpy, fastapi; print('‚úÖ All imports successful')"

===============================================================================
‚öõÔ∏è STEP 4: FRONTEND SETUP
===============================================================================

4.1) Install Node Dependencies
------------------------------
> cd ..\frontend
> npm install yarn -g
> yarn install

If yarn installation fails, use npm:
> npm install

4.2) Setup Environment Variables
--------------------------------
Edit frontend\.env file:
```
REACT_APP_BACKEND_URL=http://localhost:8001
```

4.3) Install Additional Dependencies (if missing)
------------------------------------------------
> yarn add axios
> yarn add @tailwindcss/forms

===============================================================================
üóÑÔ∏è STEP 5: DATABASE SETUP
===============================================================================

5.1) Start MongoDB Service
--------------------------
Method 1 (Service):
> net start MongoDB

Method 2 (Manual):
> "C:\Program Files\MongoDB\Server\7.0\bin\mongod.exe" --dbpath "C:\data\db"

5.2) Create Database Directory (if manual start)
-----------------------------------------------
> mkdir C:\data\db

5.3) Verify MongoDB Connection
-----------------------------
Open new Command Prompt:
> "C:\Program Files\MongoDB\Server\7.0\bin\mongo.exe"
> show dbs
> exit

===============================================================================
üöÄ STEP 6: RUNNING THE APPLICATION
===============================================================================

6.1) Start Backend Server
-------------------------
Terminal 1:
> cd C:\VideoArtMasterpiece
> venv\Scripts\activate
> cd backend
> python -m uvicorn server:app --host 0.0.0.0 --port 8001 --reload

‚úÖ Backend should be running at: http://localhost:8001

6.2) Start Frontend Server
--------------------------
Terminal 2:
> cd C:\VideoArtMasterpiece\frontend
> yarn start

‚úÖ Frontend should be running at: http://localhost:3000

6.3) Verify Application
-----------------------
1. Open browser to: http://localhost:3000
2. You should see the Video Art Masterpiece interface
3. Test API health: http://localhost:8001/api/health

===============================================================================
üîß STEP 7: VS CODE CONFIGURATION
===============================================================================

7.1) Open Project in VS Code
----------------------------
> code C:\VideoArtMasterpiece

7.2) Configure Python Interpreter
---------------------------------
- Press Ctrl+Shift+P
- Type: "Python: Select Interpreter"
- Choose: C:\VideoArtMasterpiece\venv\Scripts\python.exe

7.3) Setup Launch Configuration
------------------------------
Create .vscode\launch.json:
```json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Backend FastAPI",
            "type": "python",
            "request": "launch",
            "program": "${workspaceFolder}/venv/Scripts/uvicorn.exe",
            "args": [
                "backend.server:app",
                "--host", "0.0.0.0",
                "--port", "8001",
                "--reload"
            ],
            "console": "integratedTerminal",
            "cwd": "${workspaceFolder}"
        }
    ]
}
```

7.4) Setup Tasks
----------------
Create .vscode\tasks.json:
```json
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start Backend",
            "type": "shell",
            "command": "venv\\Scripts\\activate && cd backend && python -m uvicorn server:app --host 0.0.0.0 --port 8001 --reload",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "new"
            }
        },
        {
            "label": "Start Frontend",
            "type": "shell",
            "command": "cd frontend && yarn start",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "panel": "new"
            }
        }
    ]
}
```

===============================================================================
üõ†Ô∏è TROUBLESHOOTING COMMON ISSUES
===============================================================================

‚ùå Issue: "python is not recognized"
‚úÖ Solution: 
- Reinstall Python with "Add to PATH" checked
- Or manually add Python to PATH in Environment Variables

‚ùå Issue: "MongoDB connection failed"
‚úÖ Solution:
- Check if MongoDB service is running: net start MongoDB
- Verify connection string in backend\.env
- Create data directory: mkdir C:\data\db

‚ùå Issue: "FFmpeg not found"
‚úÖ Solution:
- Add FFmpeg to System PATH
- Or install via Chocolatey: choco install ffmpeg
- Restart Command Prompt after installation

‚ùå Issue: "OpenCV import error"
‚úÖ Solution:
- Try: pip install opencv-python-headless
- Or: pip install --upgrade pip setuptools wheel
- Then: pip install opencv-python

‚ùå Issue: "Port 3000/8001 already in use"
‚úÖ Solution:
- Kill process: netstat -ano | findstr :3000
- Find PID and kill: taskkill /PID <pid> /F
- Or change ports in configuration

‚ùå Issue: "Yarn command not found"
‚úÖ Solution:
- Install yarn globally: npm install -g yarn
- Or use npm instead: npm install && npm start

‚ùå Issue: "Module not found" errors
‚úÖ Solution:
- Activate virtual environment: venv\Scripts\activate
- Reinstall dependencies: pip install -r backend\requirements.txt
- For frontend: cd frontend && yarn install

===============================================================================
üß™ STEP 8: TESTING THE SETUP
===============================================================================

8.1) Backend API Test
---------------------
Open browser to: http://localhost:8001/api/health
Expected response: {"status": "healthy", ...}

8.2) Upload Test
----------------
1. Go to: http://localhost:3000
2. Upload a small video file (.mp4, .avi, .mov)
3. Select an art style (pencil, cartoon, oil painting, etc.)
4. Click "Create Masterpiece"
5. Monitor progress and download result

8.3) Full Feature Test
---------------------
1. Upload video ‚úÖ
2. AI Analysis ‚úÖ
3. Preview frames ‚úÖ
4. Process with different effects ‚úÖ
5. View in gallery ‚úÖ
6. Preview processed video ‚úÖ
7. Download masterpiece ‚úÖ

===============================================================================
üìä PERFORMANCE OPTIMIZATION
===============================================================================

For better performance on Windows:

1. Add Windows Defender exclusions:
   - C:\VideoArtMasterpiece\
   - Python installation directory
   - Node.js installation directory

2. Close unnecessary applications during video processing

3. Ensure at least 4GB free RAM for large video files

4. Use SSD storage for better I/O performance

===============================================================================
üîÑ UPDATES AND MAINTENANCE
===============================================================================

Keep dependencies updated:
> venv\Scripts\activate
> pip install --upgrade -r backend\requirements.txt
> cd frontend && yarn upgrade

===============================================================================
üìû SUPPORT
===============================================================================

If you encounter any issues:

1. Check this troubleshooting guide first
2. Verify all dependencies are installed correctly
3. Check Windows Event Viewer for system errors
4. Ensure all ports (3000, 8001, 27017) are available
5. Try restarting all services and your computer

Common log locations:
- Backend logs: Check VS Code terminal or console output
- Frontend logs: Check browser developer tools (F12)
- MongoDB logs: C:\Program Files\MongoDB\Server\7.0\log\

===============================================================================
üéâ CONGRATULATIONS!
===============================================================================

You now have the complete Video Art Masterpiece application running on Windows!

üé® Features available:
- 6 artistic effects (pencil, cartoon, oil painting, watercolor, anime, vintage)
- AI-powered effect recommendations
- Real-time preview streaming
- Advanced video editing (crop, trim, resize)
- Professional gallery with thumbnails
- Enhanced download system
- Effect comparison grids

Enjoy creating video masterpieces! üé¨‚ú®

===============================================================================